class Property::Search < BaseSearch
  class Criteria::Display
    class Options
      def initialize
      end

      def options name
        meth = "#{name}_options"
        raise ArgumentError, "No Search options defined for #{name}" unless respond_to? meth
        send(meth) 
      end

      def self.search_options
        [:radius, :rooms, :sqm, :sqfeet, :cost, :rentability, :rating]
      end

      protected

      def unit_label_for name
        locale_value name, 'unit'
      end

      def label_for choice
        choice.split('::').first
      end

      def key_for choice
        choice.split('::').last
      end

      def any_label name
        locale_value name, 'options.any'
      end

      def choices_for name
        locale_value name, 'options.choice'
      end

      def adjust_unit name, number      
        op = number == '1' ? :singularize : :pluralize
        name.last =~ /[a-z]$/i ? name.send(op) : name
      end

      # For each search option available in the search bar, a method of the form:
      #   [name]_options fx .rooms_options will be generated

      # The method returns a hash 
      # The key => value is then value and label for each option
      # This Hash is generated by reading from the YAML file for the search form
      search_options.each do |name|
        define_method "#{name}_options" do
          any = { 'any' => any_label(name) }
          hash = choices_for(name).inject(any) do |res, choice|
            raise ArgumentError, "choice for #{name} was blank" if choice.blank?

            key = key_for(choice) # res.size.to_s
            choice_label = label_for(choice)
            unit = adjust_unit unit_label_for(name), key

            # label: choice + unit, fx '2' + 'kms'
            label = [choice_label, unit].compact.join(' ')
            # puts "res:#{res} - label:#{label} - key:#{key} - choice_label: choice_label - choice: #{choice}"
            res.merge!(key.to_s => label.to_s) unless key.blank? || label.blank?
            res
          end
        end
      end

      def types_options
        locale_value("types.options")
      end

      def furnishment_options
        locale_value "furnishment.options"
      end

      def locale_value *keys
        I18n.translate! ['property', keys].flatten.join('.')
      rescue I18n::MissingTranslationData
        ''
      end
    end
  end
end