class Property::Search::Display
  class SearchOptions
    def initialize
    end

    def options name
      meth = "#{name}_options"
      raise ArgumentError, "No Search options defined for #{name}" unless respond_to? meth
      send(meth) 
    end

    def self.search_options
      [:radius, :rooms, :size, :cost, :rentability, :rating]
    end

    protected

    def self.unit_label_for name
      locale_value name, 'unit'
    end

    def self.any_label name
      locale_value name, 'options.any'
    end

    def self.choices_for name
      locale_value name, 'options.choice'
    end

    # For each search option available in the search bar, a method of the form:
    #   [name]_options fx .rooms_options will be generated

    # The method returns a hash 
    # The key => value is then value and label for each option
    # This Hash is generated by reading from the YAML file for the search form
    search_options.each do |name|
      define_method "#{name}_options" do
        any = { 'any' => any_label) }
        hash = choices_for(name).inject(any) do |res, choice|
          key = res.size.to_s
          label = [choice, unit_label_for(name)].compact.join(' ')
          res.merge!(key => label) unless key.blank? || label.blank?
          res
        end
      end
    end

    def type_options
      locale_value "type.options"
    end

    def furnishment_options
      locale_value "furnishment.options"
    end

    def locale_value *keys
      I18n.translate! ['property', keys].flatten.join('.')
    rescue I18n::MissingTranslationData
      ''
    end
  end
end
